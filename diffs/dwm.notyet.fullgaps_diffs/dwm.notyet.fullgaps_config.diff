diff --git a/config.def.h b/config.def.h
index 1c0b587..f882465 100644
--- a/config.def.h
+++ b/config.def.h
@@ -2,16 +2,22 @@
 
 /* appearance */
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
-static const unsigned int snap      = 32;       /* snap pixel */
+static const unsigned int gappx     = 5;        /* gaps between windows */
+static const unsigned int snap      = 5;        /* snap pixel */
+static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
+static const unsigned int systrayspacing = 2;   /* systray spacing */
+static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
+static int showsystray                   = 0;   /* 0 means no systray */
+static const int rmaster            = 0;        /* 1 means master-area is initially on the right */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
-static const char col_gray1[]       = "#222222";
+static const char *fonts[]          = { "FuraCode Nerd Font:style=Medium:size=8" };
+static const char dmenufont[]       = "FuraCode Nerd Font:style=Medium:size=8";
+static const char col_gray1[]       = "#1e1e1e";
 static const char col_gray2[]       = "#444444";
 static const char col_gray3[]       = "#bbbbbb";
 static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
+static const char col_cyan[]        = "#005f87";
 static const char *colors[][3]      = {
 	/*               fg         bg         border   */
 	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
@@ -22,29 +28,82 @@ static const char *colors[][3]      = {
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 
 static const Rule rules[] = {
-	/* xprop(1):
-	 *	WM_CLASS(STRING) = instance, class
-	 *	WM_NAME(STRING) = title
-	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+    /* xprop(1):
+     *	WM_CLASS(STRING) = instance, class
+     *	WM_NAME(STRING) = title
+     */
+    /* class                  instance              title                         tags mask     iscentered     isfloating      canfocus    monitor */
+    // Non FLoating
+    { "Gimp-2.10",            NULL,                 NULL,                         0,            1,             0,              1,          -1 },
+    { "firefox",              NULL,                 NULL,                         2,            1,             0,              1,          -1 },
+    { "Chromium-browser",     NULL,                 NULL,                         2,            1,             0,              1,          -1 },
+    { "TelegramDesktop",      NULL,                 NULL,                         1 << 7,       1,             0,              1,          -1 },
+    { "Thunderbird",          NULL,                 NULL,                         1 << 6,       1,             0,              1,          -1 },
+    { "Hexchat",              NULL,                 NULL,                         1 << 5,       1,             0,              1,          -1 },
+    { "mpv",                  NULL,                 NULL,                         0,            1,             0,              1,          -1 },
+    { NULL,                   "libreoffice",        NULL,                         0,            1,             0,              1,          -1 },
+    { "Thunar",               "thunar",             NULL,                         1 << 2,       1,             0,              1,          -1 },
+    { "Org.gnome.Nautilus",   NULL,                 NULL,                         1 << 2,       1,             0,              1,          -1 },
+    { "St",                   NULL,                 "neomutt",                    1 << 6,       1,             0,              1,          -1 },
+    { "St",                   NULL,                 "ranger",                     1 << 2,       1,             0,              1,          -1 },
+    { "St",                   NULL,                 "newsboat",                   1 << 5,       1,             0,              1,          -1 },
+    { "St",                   NULL,                 "WeeChat",                    1 << 5,       1,             0,              1,          -1 },
+    { "Transmission-gtk",     NULL,                 NULL,                         1 << 5,       1,             0,              1,          -1 },
+    { "Postbird",             NULL,                 NULL,                         0,            1,             0,              1,          -1 },
+    { "xdman-Main",           NULL,                 "XDM 2020",                   0,            1,             0,              1,          -1 },
+    { "Guvcview",             NULL,                 NULL,                         1 << 4,       1,             0,              1,          -1 },
+    { "winword.exe",          NULL,                 NULL,                         0,            1,             0,              1,          -1 },
+    // Floating
+    { "Tor Browser",          "Navigator",          NULL,                         2,            1,             1,              1,          -1 },
+    { "St",                   NULL,                 "st+",                        0,            1,             1,              1,          -1 },
+    { "copyq",                NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "Arandr",               NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "Gcolor3",              NULL,                 "Color picker",               0,            1,             1,              1,          -1 },
+    { "Gnome-calculator",     NULL,                 "Calculator",                 0,            1,             1,              1,          -1 },
+    { "Hexchat",              NULL,                 "Network List - HexChat",     1 << 5,       1,             1,              1,          -1 },
+    { "SimpleScreenRecorder", NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "Soffice",              NULL,                 "Print",                      0,            1,             1,              1,          -1 },
+    { "Chrome",               NULL,                 "Save File",                  2,            1,             1,              1,          -1 },
+    { "Barrier",              NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "Soffice",              "soffice",            NULL,                         0,            1,             0,              1,          -1 },
+    { "Thunar",               "thunar",             "File Operation Progress",    0,            1,             1,              1,          -1 },
+    { "System-config-printer.py", NULL,             NULL,                         0,            1,             1,              1,          -1 },
+    { "Nm-connection-editor", NULL,                 "Network Connections",        0,            1,             1,              1,          -1 },
+    { "Pavucontrol",          NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "Gpick",                NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "vokoscreen",           NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "Blueman-manager",      NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "Xsane",                NULL,                 "No devices available",       0,            1,             1,              1,          -1 },
+    { "scrcpy",               NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "GParted",              NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "zoom",                 NULL,                 "Question and Answer",        0,            1,             1,              1,          -1 },
+    { "guvcview",             NULL,                 NULL,                         0,            1,             1,              0,          -1 },
+    { "Gnome-power-statistics", NULL,               NULL,                         0,            1,             1,              1,          -1 },
+    { "firefox",              "Browser",            "About Mozilla Firefox",      0,            1,             1,              1,          -1 },
+    { "Tor Browser",          "Browser",            "About Tor Browser",          0,            1,             1,              1,          -1 },
+    { "xdman-Main",           NULL,                 NULL,                         0,            0,             1,              1,          -1 },
+    { "Gkamus",               NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "Kazam",                NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    { "Pysheng-gui",          NULL,                 NULL,                         0,            1,             1,              1,          -1 },
+    // Scratchpad
+    { NULL,                   NULL,                 "hidden",       scratchpad_mask,            0,             1,              1,          -1 },
 };
 
 /* layout(s) */
-static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
+static const float mfact     = 0.50; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
 	{ "[]=",      tile },    /* first entry is default */
 	{ "><>",      NULL },    /* no layout function means floating behavior */
-	{ "[M]",      monocle },
+	{ "[M]",      monocle }, /* All windows on top of eachother */
+	{ "[D]",      deck },    /* Master on left, slaves in monocle-like mode on right */
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -56,34 +115,47 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
+static const char *dmenucmd[] = { "/usr/local/bin/dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
 static const char *termcmd[]  = { "st", NULL };
 
 static Key keys[] = {
 	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
+	{ MODKEY,                       XK_d,      spawn,          SHCMD("/usr/bin/dmenu-apps") },
 	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
 	{ MODKEY,                       XK_b,      togglebar,      {0} },
+    { MODKEY|ShiftMask,             XK_b,      togglesystray,  {0} },
 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
 	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
+	{ MODKEY|ShiftMask,             XK_i,      incnmaster,     {.i = -1 } },
 	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
 	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
+	{ MODKEY|ShiftMask,             XK_h,      setcfact,       {.f = +0.05} },
+	{ MODKEY|ShiftMask,             XK_l,      setcfact,       {.f = -0.05} },
+	{ MODKEY|ShiftMask,             XK_o,      setcfact,       {.f =  0.00} },
+	{ MODKEY|ShiftMask,             XK_j,      movestack,      {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_k,      movestack,      {.i = -1 } },
 	{ MODKEY,                       XK_Return, zoom,           {0} },
 	{ MODKEY,                       XK_Tab,    view,           {0} },
 	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
 	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
 	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
 	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
+	{ MODKEY,                       XK_u,      setlayout,      {.v = &layouts[3]} },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
 	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
-	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
-	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
+	{ MODKEY|ShiftMask,             XK_f,      togglefullscr,  {0} },
+	{ MODKEY,                       XK_s,      togglesticky,   {0} },
+	{ MODKEY,                       XK_r,      togglermaster,  {0} },
+	{ MODKEY,                       XK_0,      view,           {.ui = ~scratchpad_mask } },
+	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~scratchpad_mask } },
 	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_g,  setgaps,            {.i = -1 } },
+	{ MODKEY,                       XK_g,  setgaps,            {.i = +1 } },
+	{ MODKEY|ControlMask,           XK_g,  setgaps,            {.i = 0  } },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
@@ -94,6 +166,44 @@ static Key keys[] = {
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+	{ MODKEY,                       XK_minus, scratchpad_show, {0} },
+	{ MODKEY|ShiftMask,             XK_minus, scratchpad_hide, {0} },
+	{ MODKEY|ControlMask,           XK_minus,scratchpad_remove,{0} },
+
+    // Custom Keys
+    /* modifier                     key                        function        argument */
+    { MODKEY|ControlMask,           XK_Return,                 spawn,          SHCMD("st -T 'st+'") },
+    { MODKEY|Mod1Mask,              XK_Return,                 spawn,          SHCMD("tabbed -c -r 2 st -w ''") },
+    { MODKEY|ShiftMask,             XK_End,                    spawn,          SHCMD("/usr/bin/rofi-power 'killall dwm'") },
+    { MODKEY,                       XK_e,                      spawn,          SHCMD("/usr/bin/rofi-emoji") },
+    { MODKEY,                       XK_Print,                  spawn,          SHCMD("scrot 'Screenshot_%Y-%m-%d_%H-%M-%S.png' -e 'mv *.png ~/pic/ScreenShots/'; notify-send 'Scrot' 'Screen has been captured!'") },
+    { MODKEY|ControlMask,           XK_Print,                  spawn,          SHCMD("scrot -d 5 'Screenshot_%Y-%m-%d_%H-%M-%S.png' -e 'mv *.png ~/pic/ScreenShots/'; notify-send 'Scrot' 'Screen has been captured!'") },
+    { MODKEY|ShiftMask,             XK_Print,                  spawn,          SHCMD("/usr/bin/flameshot gui") },
+    { MODKEY|Mod1Mask,              XK_Print,                  spawn,          SHCMD("/usr/bin/flameshot gui -d 5000") },
+    { MODKEY|ShiftMask,             XK_Pause,                  spawn,          SHCMD("/usr/bin/dmenu-record") },
+    { MODKEY|ShiftMask,             XK_x,                      spawn,          SHCMD("/usr/bin/lock-dark") },
+    { MODKEY,                       XK_F7,                     spawn,          SHCMD("/usr/bin/arandr") },
+    { MODKEY,                       XK_F8,                     spawn,          SHCMD("/usr/bin/networkmanager_dmenu") },
+    { MODKEY,                       XK_F9,                     spawn,          SHCMD("/usr/bin/guvcview-launcher") },
+    { MODKEY|ShiftMask,             XK_F9,                     spawn,          SHCMD("pkill -f 'guvcview'") },
+    { MODKEY|ControlMask,           XK_F9,                     spawn,          SHCMD("wmctrl -r 'Guvcview' -e '0,862,609,160,120'") },
+    { MODKEY|Mod1Mask,              XK_F9,                     spawn,          SHCMD("wmctrl -r 'Guvcview' -e '0,862,646,160,120'") },
+    { MODKEY,                       XK_F10,                    spawn,          SHCMD("/usr/bin/keybind-helper") },
+    { MODKEY,                       XK_F11,                    spawn,          SHCMD("/usr/bin/screenkey-launcher") },
+    { MODKEY|ShiftMask,             XK_F11,                    spawn,          SHCMD("pkill -f 'screenkey'") },
+    { MODKEY,                       XK_F12,                    spawn,          SHCMD("/usr/bin/dmenu-systemd") },
+    { MODKEY,                       XK_p,                      spawn,          SHCMD("/usr/bin/clipmenu") },
+    { MODKEY|ShiftMask,             XK_p,                      spawn,          SHCMD("clipdel -d '.'") },
+    { MODKEY|ShiftMask,             XK_backslash,              spawn,          SHCMD("/usr/bin/dmenu-pass") },
+    { MODKEY,                       XK_backslash,              spawn,          SHCMD("/usr/bin/passtore 0") },
+    { MODKEY,                       XK_F4,                     spawn,          SHCMD("killall conky; /usr/bin/feh --bg-fill -Z $WALLPAPER3") },
+    { MODKEY,                       XK_F5,                     spawn,          SHCMD("killall conky; /usr/bin/feh --bg-fill -Z $WALLPAPER1") },
+    { MODKEY|ShiftMask,             XK_F5,                     spawn,          SHCMD("/usr/bin/feh --bg-fill -Z $WALLPAPER1; ./.config/conky/conky-launch.sh") },
+    { MODKEY,                       XK_F6,                     spawn,          SHCMD("killall conky; /usr/bin/feh --bg-fill -Z $WALLPAPER2") },
+    { MODKEY|ShiftMask,             XK_F6,                     spawn,          SHCMD("/usr/bin/feh --bg-fill -Z $WALLPAPER2; ./.config/conky/conky-launch.sh") },
+    { 0,                            0x1008ff13,                spawn,          SHCMD("pamixer --increase 5") },
+    { 0,                            0x1008ff11,                spawn,          SHCMD("pamixer --decrease 5") },
+    { 0,                            0x1008ff12,                spawn,          SHCMD("pamixer --toggle-mute") },
 };
 
 /* button definitions */
@@ -107,6 +217,7 @@ static Button buttons[] = {
 	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
 	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
 	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
+	{ ClkClientWin,         MODKEY|ShiftMask, Button3,      dragcfact,      {0} },
 	{ ClkTagBar,            0,              Button1,        view,           {0} },
 	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
 	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
diff --git a/config.mk b/config.mk
index 7084c33..40fd077 100644
--- a/config.mk
+++ b/config.mk
@@ -7,8 +7,8 @@ VERSION = 6.2
 PREFIX = /usr/local
 MANPREFIX = ${PREFIX}/share/man
 
-X11INC = /usr/X11R6/include
-X11LIB = /usr/X11R6/lib
+X11INC = /usr/local/include
+X11LIB = /usr/local/lib
 
 # Xinerama, comment if you don't want it
 XINERAMALIBS  = -lXinerama
diff --git a/drw.c b/drw.c
index 4cdbcbe..490a592 100644
--- a/drw.c
+++ b/drw.c
@@ -95,7 +95,6 @@ drw_free(Drw *drw)
 {
 	XFreePixmap(drw->dpy, drw->drawable);
 	XFreeGC(drw->dpy, drw->gc);
-	drw_fontset_free(drw->fonts);
 	free(drw);
 }
 
@@ -203,6 +202,8 @@ drw_clr_create(Drw *drw, Clr *dest, const char *clrname)
 	                       DefaultColormap(drw->dpy, drw->screen),
 	                       clrname, dest))
 		die("error, cannot allocate color '%s'", clrname);
+
+	dest->pixel |= 0xff << 24;
 }
 
 /* Wrapper to create color schemes. The caller has to call free(3) on the
diff --git a/dwm.c b/dwm.c
index 9fd0286..b074009 100644
--- a/dwm.c
+++ b/dwm.c
@@ -163,7 +163,7 @@ static void detachstack(Client *c);
 static Monitor *dirtomon(int dir);
 static void drawbar(Monitor *m);
 static void drawbars(void);
-static void enternotify(XEvent *e);
+/* static void enternotify(XEvent *e); */
 static void expose(XEvent *e);
 static void focus(Client *c);
 static void focusin(XEvent *e);
@@ -195,6 +195,12 @@ static void resizemouse(const Arg *arg);
 static void restack(Monitor *m);
 static void run(void);
 static void scan(void);
+static void scratchpad_hide ();
+static _Bool scratchpad_last_showed_is_killed (void);
+static void scratchpad_remove ();
+static void scratchpad_show ();
+static void scratchpad_show_client (Client * c);
+static void scratchpad_show_first (void);
 static int sendevent(Client *c, Atom proto);
 static void sendmon(Client *c, Monitor *m);
 static void setclientstate(Client *c, long state);
@@ -212,6 +218,7 @@ static void tagmon(const Arg *arg);
 static void tile(Monitor *);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
+static void togglefullscr(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
 static void unfocus(Client *c, int setfocus);
@@ -250,7 +257,7 @@ static void (*handler[LASTEvent]) (XEvent *) = {
 	[ConfigureRequest] = configurerequest,
 	[ConfigureNotify] = configurenotify,
 	[DestroyNotify] = destroynotify,
-	[EnterNotify] = enternotify,
+	/* [EnterNotify] = enternotify, */
 	[Expose] = expose,
 	[FocusIn] = focusin,
 	[KeyPress] = keypress,
@@ -269,11 +276,15 @@ static Drw *drw;
 static Monitor *mons, *selmon;
 static Window root, wmcheckwin;
 
+/* scratchpad */
+# define scratchpad_mask (1u << sizeof tags / sizeof * tags)
+static Client * scratchpad_last_showed = NULL;
+
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
 /* compile-time check if all tags fit into an unsigned int bit array. */
-struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
+struct NumTags { char limitexceeded[LENGTH(tags) > 30 ? -1 : 1]; };
 
 /* function implementations */
 void
@@ -309,7 +320,7 @@ applyrules(Client *c)
 		XFree(ch.res_class);
 	if (ch.res_name)
 		XFree(ch.res_name);
-	c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
+	c->tags = c->tags & (TAGMASK | scratchpad_mask) ? c->tags & (TAGMASK | scratchpad_mask) : c->mon->tagset[c->mon->seltags];
 }
 
 int
@@ -752,24 +763,24 @@ drawbars(void)
 		drawbar(m);
 }
 
-void
-enternotify(XEvent *e)
-{
-	Client *c;
-	Monitor *m;
-	XCrossingEvent *ev = &e->xcrossing;
+/* void */
+/* enternotify(XEvent *e) */
+/* { */
+/* 	Client *c; */
+/* 	Monitor *m; */
+/* 	XCrossingEvent *ev = &e->xcrossing; */
 
-	if ((ev->mode != NotifyNormal || ev->detail == NotifyInferior) && ev->window != root)
-		return;
-	c = wintoclient(ev->window);
-	m = c ? c->mon : wintomon(ev->window);
-	if (m != selmon) {
-		unfocus(selmon->sel, 1);
-		selmon = m;
-	} else if (!c || c == selmon->sel)
-		return;
-	focus(c);
-}
+/* 	if ((ev->mode != NotifyNormal || ev->detail == NotifyInferior) && ev->window != root) */
+/* 		return; */
+/* 	c = wintoclient(ev->window); */
+/* 	m = c ? c->mon : wintomon(ev->window); */
+/* 	if (m != selmon) { */
+/* 		unfocus(selmon->sel, 1); */
+/* 		selmon = m; */
+/* 	} else if (!c || c == selmon->sel) */
+/* 		return; */
+/* 	focus(c); */
+/* } */
 
 void
 expose(XEvent *e)
@@ -1051,6 +1062,11 @@ manage(Window w, XWindowAttributes *wa)
 	c->bw = borderpx;
 
 	wc.border_width = c->bw;
+
+    /* for centering window client open */
+    if (c->x == selmon->wx) c->x += (c->mon->ww - WIDTH(c)) / 2 - c->bw;
+    if (c->y == selmon->wy) c->y += (c->mon->wh - HEIGHT(c)) / 2 - c->bw;
+
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
 	XSetWindowBorder(dpy, w, scheme[SchemeNorm][ColBorder].pixel);
 	configure(c); /* propagates border_width, if size doesn't change */
@@ -1408,6 +1424,97 @@ scan(void)
 	}
 }
 
+static void scratchpad_hide ()
+{
+	if (selmon -> sel)
+	{
+		selmon -> sel -> tags = scratchpad_mask;
+		focus(NULL);
+		arrange(selmon);
+	}
+}
+
+static _Bool scratchpad_last_showed_is_killed (void)
+{
+	_Bool killed = 1;
+	for (Client * c = selmon -> clients; c != NULL; c = c -> next)
+	{
+		if (c == scratchpad_last_showed)
+		{
+			killed = 0;
+			break;
+		}
+	}
+	return killed;
+}
+
+static void scratchpad_remove ()
+{
+	if (selmon -> sel && scratchpad_last_showed != NULL && selmon -> sel == scratchpad_last_showed)
+		scratchpad_last_showed = NULL;
+}
+
+static void scratchpad_show ()
+{
+	if (scratchpad_last_showed == NULL || scratchpad_last_showed_is_killed ())
+		scratchpad_show_first ();
+	else
+	{
+		if (scratchpad_last_showed -> tags != scratchpad_mask)
+		{
+			scratchpad_last_showed -> tags = scratchpad_mask;
+			focus(NULL);
+			arrange(selmon);
+		}
+		else
+		{
+			_Bool found_current = 0;
+			_Bool found_next = 0;
+			for (Client * c = selmon -> clients; c != NULL; c = c -> next)
+			{
+				if (found_current == 0)
+				{
+					if (c == scratchpad_last_showed)
+					{
+						found_current = 1;
+						continue;
+					}
+				}
+				else
+				{
+					if (c -> tags == scratchpad_mask)
+					{
+						found_next = 1;
+						scratchpad_show_client (c);
+						break;
+					}
+				}
+			}
+			if (found_next == 0) scratchpad_show_first ();
+		}
+	}
+}
+
+static void scratchpad_show_client (Client * c)
+{
+	scratchpad_last_showed = c;
+	c -> tags = selmon->tagset[selmon->seltags];
+	focus(c);
+	arrange(selmon);
+}
+
+static void scratchpad_show_first (void)
+{
+	for (Client * c = selmon -> clients; c != NULL; c = c -> next)
+	{
+		if (c -> tags == scratchpad_mask)
+		{
+			scratchpad_show_client (c);
+			break;
+		}
+	}
+}
+
 void
 sendmon(Client *c, Monitor *m)
 {
@@ -1722,6 +1829,13 @@ togglefloating(const Arg *arg)
 	arrange(selmon);
 }
 
+void
+togglefullscr(const Arg *arg)
+{
+  if(selmon->sel)
+    setfullscreen(selmon->sel, !selmon->sel->isfullscreen);
+}
+
 void
 toggletag(const Arg *arg)
 {
